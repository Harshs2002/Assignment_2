class Stack:
    def __init__(self):
        self.items = []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        else:
            return None

    def is_empty(self):
        return len(self.items) == 0


def evaluate_postfix(expression):
    stack = Stack()

    for char in expression:
        if char.isdigit():
            stack.push(int(char))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()

            if operand1 is None or operand2 is None:
                raise ValueError("Invalid postfix expression")

            result = perform_operation(operand1, operand2, char)
            stack.push(result)

    final_result = stack.pop()

    if not stack.is_empty() or final_result is None:
        raise ValueError("Invalid postfix expression")

    return final_result


def perform_operation(operand1, operand2, operator):
    if operator == '+':
        return operand1 + operand2
    elif operator == '-':
        return operand1 - operand2
    elif operator == '*':
        return operand1 * operand2
    elif operator == '/':
        return operand1 / operand2
    else:
        raise ValueError("Invalid operator")


postfix_expression = "23+4*"
result = evaluate_postfix(postfix_expression)
print("Result:", result)


# output
Result: 14

